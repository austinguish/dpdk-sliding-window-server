// static int initialize_flows(uint16_t port, int flow_num)
// {
//     rte_mbuf* pkt;
//     rte_ether_hdr* eth_hdr;
//     rte_ipv4_hdr* ip_hdr;
//     udp_header_extra* udp_hdr_ext;
//     uint8_t* payload;
//
//     // Allocate a new mbuf for the initialization packet
//     pkt = rte_pktmbuf_alloc(mbuf_pool);
//     if (pkt == NULL)
//     {
//         rte_exit(EXIT_FAILURE, "Failed to allocate mbuf for initialization\n");
//     }
//
//     // Prepare the packet
//     eth_hdr = rte_pktmbuf_mtod(pkt, struct rte_ether_hdr *);
//     ip_hdr = (rte_ipv4_hdr*)(eth_hdr + 1);
//     udp_hdr_ext = (udp_header_extra*)(ip_hdr + 1);
//     payload = (uint8_t*)(udp_hdr_ext + 1);
//
//     // Fill in the headers (similar to prepare_packet function)
//     // Ethernet header
//     rte_ether_addr_copy(&my_eth, &eth_hdr->src_addr);
//     rte_ether_addr_copy(&dst, &eth_hdr->dst_addr);
//     eth_hdr->ether_type = rte_cpu_to_be_16(RTE_ETHER_TYPE_IPV4);
//
//     // IP header
//     ip_hdr->version_ihl = 0x45;
//     ip_hdr->type_of_service = 0;
//     ip_hdr->total_length = rte_cpu_to_be_16(sizeof(*ip_hdr) + sizeof(*udp_hdr_ext) + sizeof(int));
//     ip_hdr->packet_id = 0;
//     ip_hdr->fragment_offset = 0;
//     ip_hdr->time_to_live = 64;
//     ip_hdr->next_proto_id = IPPROTO_UDP;
//     ip_hdr->src_addr = rte_cpu_to_be_32(0x0A000001); // 10.0.0.1
//     ip_hdr->dst_addr = rte_cpu_to_be_32(0x0A000002); // 10.0.0.2
//     ip_hdr->hdr_checksum = 0; // Will be filled by hardware
//
//     // UDP header
//     udp_hdr_ext->udp_hdr.src_port = rte_cpu_to_be_16(PORT_NUM);
//     udp_hdr_ext->udp_hdr.dst_port = rte_cpu_to_be_16(PORT_NUM);
//     udp_hdr_ext->udp_hdr.dgram_len = rte_cpu_to_be_16(sizeof(*udp_hdr_ext) + sizeof(int));
//     udp_hdr_ext->udp_hdr.dgram_cksum = 0; // Will be filled by hardware
//     udp_hdr_ext->seq = 0; // Special sequence number for initialization
//     udp_hdr_ext->window_size = rte_cpu_to_be_16(flow_num); // Send flow_num as window_size
//
//     // Payload (flow_num)
//     *(int*)payload = flow_num;
//
//     // Set packet length
//     pkt->pkt_len = pkt->data_len = sizeof(*eth_hdr) + sizeof(*ip_hdr) + sizeof(*udp_hdr_ext) + sizeof(int);
//
//     // Send the packet
//     if (rte_eth_tx_burst(port, 0, &pkt, 1) != 1)
//     {
//         printf("Failed to send initialization packet\n");
//         rte_pktmbuf_free(pkt);
//         return -1;
//     }
//
//     // Wait for ACK
//     rte_mbuf* rx_pkts[1];
//     int retry_count = 0;
//     while (retry_count < 10)
//     {
//         // Try 10 times before giving up
//         if (rte_eth_rx_burst(port, 0, rx_pkts, 1) > 0)
//         {
//             // Process the received packet (you may want to add more checks here)
//             printf("Received ACK for initialization\n");
//             rte_pktmbuf_free(rx_pkts[0]);
//             return 0; // Success
//         }
//         rte_delay_ms(100); // Wait for 100ms before retrying
//         retry_count++;
//     }
//
//     printf("Failed to receive ACK for initialization\n");
//     return -1;
// }